**浏览器调试方式**

**JS数据类型**
数值、字符串、布尔值、图形、音频、视频...，所有的变量都可以使用var定义
- 数值：对于数值类型来说，不区分整数和小数
- 字符串：可以用单引号也可以用双引号
- 布尔值：var s = true;
- 数组：var arr = [1,2,'a',null,true];或new Array(1,2,'a');数组元素不需要相同类型
- 对象：大括号括起来。var obj = {属性:值,...};
**逻辑运算符**

**变量修饰符**
- var：var定义的变量可以修改，如果不初始化会输出undefined，不会报错
- let：let是块级作用域，函数内部使用let定义后，对函数外部无影响
- const：const定义的变量不可以修改，而且必须初始化

**比较运算符**
- ==：等于（如果类型不一样，但是值一样，也会判断为真）
- ===：绝对等于（必须类型相同，且值相同，才为真）
- NaN：与所有的值比较都不相等，只有使用isNaN(NaN)才返回true

**js中尽量避免使用浮点数进行运算，存在精度问题**
可以使用Math.abs(a-b)<0.000000001;这种方式通过绝对值小于一个非常小的数来近似计算。
对于Java来说，避免精度问题，可以使用BigDecimal

**严格检查模式**

**变量作用域**

- 局部变量：在方法内定义的变量
- 全局变量：在方法外定义的变量

对于for(var i ...)这个i来说，在for外面仍然可以使用(跟方法中定义的不同，方法中定义的不能在方法外使用)，为了
避免这个问题，引入了let修饰符，修饰的变量不能在for循环外使用。

**window全局作用域**
window是全局作用域，所有的全局变量默认都会绑定到window上。为了避免多个js定义了相同名称的全局变量导致冲突，
一般会通过定义一个全局唯一的对象，然后将变量作为属性赋给这个对象。(其实还是需要对象是不冲突的)

**json字符串与js对象的相互转换**

**js面向对象编程**
- 面向原型继承
- 面向class继承

**操作BOM对象**  
BOM:浏览器对象模型

